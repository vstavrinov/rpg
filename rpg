#!/bin/bash

# Readable Password Generator
# (C) Vladimir Stavrinov <vstavrinov@gmail.com>, GPL

VERSION=1.0.4

[ -r /etc/rpg/rpg.conf ] && . /etc/rpg/rpg.conf
[ -r /etc/rpg/rpg.local ] && . /etc/rpg/rpg.local
[ -r ~.config/rpg/rpgrc ] && . ~.config/rpg/.rpgrc

CONSONANT=${CONSONANT:=bdfkmnprstvz}
VOWEL=${VOWEL:=euai}
DIGIT=${DIGIT:=23456789}
MIN=${MIN:=6}
MAX=${MAX:=12}
WORDS=${WORDS:=/usr/share/dict/words}
REPEAT=${REPEAT:=5}
SPOT=${SPOT:=2}
BAD="pb bp dt vf zs pf bv"
NUMBER=${NUMBER:=true}
UPPER=${UPPER:=true}
VERBOSE=${VERBOSE:=false}

usage ()
{
    echo "
    Readable Password Generator
    (C) Vladimir Stavrinov <vstavrinov@gmail.com>, GPL

    Usage:

    $(basename $0) [-m MIN] [-x MAX] [-r REPEAT] [-nuvdh]

    -m MIN
	Minimum length MIN characters [$MIN]

    -x MAX
	Maximum length MAX characters [$MAX]

    -r REPEAT
	Repeat REPEAT times [$REPEAT]
     
    -n No digits

    -u No upper case

    -v Verbose
    -d Debug
    -h Help
    -V Version and copyright
    
    Files:
    /etc/rpg/rpg.conf
	System wide default config
    /etc/rpg/rpg.local
	System wide local config, override default config
    ~/.config/rpg/rpgrc
	User config, override system settings
    "
    exit
}

OPTERR=0
while getopts m:x:r:nuvdVh OPTION; do
    case $OPTION in
	m)
	    MIN=$OPTARG
	    ;;
	x)
	    MAX=$OPTARG
	    ;;
	r)
	    REPEAT=$OPTARG
	    ;;
	n)
	    NUMBER=false
	    ;;
	u)
	    UPPER=false
	    ;;
	v)
	    VERBOSE=true
	    ;;
	d)
	    set -x -v
	    ;;
	V)
	    echo "
	    $(basename $0) $VERSION
	    (C) Vladimir Stavrinov vstavrinov@gmail.com, GPL
	    "
	    exit
	    ;;
	h|*)
	    usage
	    ;;
    esac
done
shift  $[$OPTIND - 1]

[ $MIN -lt 1 ] && MIN=1
[ $MAX -lt 2 ] && MAX=2
[ $REPEAT -lt 1 ] && REPEAT=1
[ $SPOT -lt 1 ] && SPOT=1

pick_up()
{
    HANDLE=$1
    eval HEAP=\$"$HANDLE"
    # Remember two last symbos and pick up random index.
    PREVIOUS=$LAST
    INDEX=$((RANDOM % ${#HEAP} + 1))
    LAST=$(echo -n $HEAP | cut -c $INDEX)
    # Exclude "bad" letters combinations.
    [ -n "${PREVIOUS}" ] &&
    while [ "${BAD}" != "${BAD/${PREVIOUS}${LAST}/}" ]; do
	INDEX=$((RANDOM % ${#HEAP} + 1))
	LAST=$(echo -n $HEAP | cut -c $INDEX)
    done
    # Remove choosen symbol from its type set.
    #eval $HANDLE=$(echo -n $HEAP | tr -d $LAST)
    eval $HANDLE=${HEAP/$LAST/}
}

generate_password ()
{
    consonant=${CONSONANT}
    vowel=${VOWEL}
    digit=${DIGIT}
    LENGTH=$((MIN + RANDOM % (MAX - MIN + 1)))
    length=$LENGTH
    unset PASSWORD
    unset LAST
    unset PREVIOUS

    while [ $((length--)) -gt 0 ]; do
	[ -z "$vowel" ] && vowel=${VOWEL}
	[ -z "$consonant" ] && consonant=${CONSONANT}

	# Pick up digit with some conditions:
	#	1. The variable NUMBER is true
	#	2. Position is random from LENGTH * SPOT
	#	3. It is not at beginning
	#	4. It is not just before end
	#	5. Two last symbols are not both consonant 
	#	6. The last is not digit.

	if $NUMBER && [ $length -eq $((RANDOM % (LENGTH * SPOT))) ] && 
	   [ $length -lt $((LENGTH - 2)) ] &&
	   [ $length -ne 1 ] &&
	   ! ([ $CONSONANT != ${CONSONANT/$LAST/} ] &&
	   [ $CONSONANT != ${CONSONANT/$PREVIOUS/} ]) &&
	   [ $DIGIT = ${DIGIT/$LAST/} ]; then
	    pick_up digit
	else
	# Pick up consonant or vowel randomly in case it follow digit.
	    case $((RANDOM % 2)) in
		0)
		    # Pick up consonant if last is not consonant or two
		    # last is not consonant, but in case when last is
		    # consonant, the current position should not be just
		    # before end or at the beginning.

		    if [ $CONSONANT = ${CONSONANT/$LAST/} ] ||
		       ([ $VOWEL != ${VOWEL/$PREVIOUS/} ] &&
		        [ $length -lt $((LENGTH - 2)) ] &&
		        [ $length -gt 0 ]); then
			pick_up consonant
		    else
			pick_up vowel
		    fi
		;;

		1)
		    # Pickup vowel if last is not vowel. 
		    if [ $VOWEL = ${VOWEL/$LAST/} ]; then
			pick_up vowel
		    else
			pick_up consonant
		    fi
		;;
	    esac
	fi
	# Pick up upper case for random position from LENGTH * SPOT
	if $UPPER && [ $length -eq $((RANDOM % (LENGTH * SPOT))) ]; then
	    # Flip case up
	    LAST=$(echo -n $LAST | tr [:lower:] [:upper:])
	    # Append symbol
	    PASSWORD=${PASSWORD}${LAST}
	    # Restore case to make it possible to check against its type
	    # set.
	    LAST=$(echo -n $LAST | tr [:upper:] [:lower:])
	else
	    PASSWORD=${PASSWORD}${LAST}
	fi
	if [ -f "${WORDS}" ]; then
	    unset CHUNK
	    for CHIP in ${PASSWORD//[0-9]/ }; do
		if [ ${#CHIP} -ge ${#CHUNK} ]; then
		    CHUNK=$CHIP
		fi
	    done
	fi
    done
}

eval $VERBOSE &&
echo "
CONSONANT=${CONSONANT}
VOWEL=${VOWEL}
DIGIT=${DIGIT}
MIN=${MIN}
MAX=${MAX}
WORDS=${WORDS}
REPEAT=${REPEAT}
SPOT=${SPOT}
BAD=\"$BAD\"
NUMBER=${NUMBER}
UPPER=${UPPER}
"
echo
while [ $((REPEAT--)) -gt 0 ]; do
    generate_password
    if [ -f "${WORDS}" ]; then
	while (grep -wEqi -f -  ${WORDS} <<-EOF
			"^${CHUNK}$"
			EOF
	); do
	    generate_password
	done
    fi
    cat <<-EOF
        $PASSWORD
	EOF
done
echo 
